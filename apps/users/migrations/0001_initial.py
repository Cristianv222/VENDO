# Generated by Django 5.2.3 on 2025-06-25 04:50

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('core', '0002_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(error_messages={'unique': 'Ya existe un usuario con este email.'}, max_length=254, unique=True, verbose_name='email address')),
                ('document_type', models.CharField(choices=[('cedula', 'Cédula'), ('pasaporte', 'Pasaporte'), ('ruc', 'RUC')], default='cedula', max_length=20, verbose_name='Tipo de documento')),
                ('document_number', models.CharField(max_length=20, unique=True, validators=[django.core.validators.RegexValidator(message='El número de documento solo puede contener números y guiones.', regex='^[\\d\\-]+$')], verbose_name='Número de documento')),
                ('phone', models.CharField(blank=True, max_length=20, validators=[django.core.validators.RegexValidator(message='Formato de teléfono inválido.', regex='^[\\d\\+\\-\\(\\)\\s]+$')], verbose_name='Teléfono')),
                ('mobile', models.CharField(blank=True, max_length=20, validators=[django.core.validators.RegexValidator(message='Formato de celular inválido.', regex='^[\\d\\+\\-\\(\\)\\s]+$')], verbose_name='Celular')),
                ('avatar', models.ImageField(blank=True, upload_to='avatars/', verbose_name='Avatar')),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name='Fecha de nacimiento')),
                ('address', models.TextField(blank=True, verbose_name='Dirección')),
                ('language', models.CharField(choices=[('es', 'Español'), ('en', 'Inglés')], default='es', max_length=10, verbose_name='Idioma')),
                ('timezone', models.CharField(default='America/Guayaquil', max_length=50, verbose_name='Zona horaria')),
                ('is_system_admin', models.BooleanField(default=False, verbose_name='Administrador del sistema')),
                ('force_password_change', models.BooleanField(default=False, verbose_name='Forzar cambio de contraseña')),
                ('password_changed_at', models.DateTimeField(blank=True, null=True, verbose_name='Contraseña cambiada el')),
                ('last_activity', models.DateTimeField(blank=True, null=True, verbose_name='Última actividad')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Fecha de actualización')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='vendo_user_set', related_query_name='vendo_user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='vendo_user_set', related_query_name='vendo_user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Usuario',
                'verbose_name_plural': 'Usuarios',
                'db_table': 'users_user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Permission',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Fecha de actualización')),
                ('is_active', models.BooleanField(default=True, verbose_name='Activo')),
                ('name', models.CharField(max_length=100, verbose_name='Nombre')),
                ('codename', models.CharField(max_length=100, unique=True, validators=[django.core.validators.RegexValidator(message='El código solo puede contener letras minúsculas, números y guiones bajos.', regex='^[a-z0-9_]+$')], verbose_name='Código')),
                ('description', models.TextField(blank=True, verbose_name='Descripción')),
                ('module', models.CharField(choices=[('core', 'Core'), ('users', 'Usuarios'), ('pos', 'Punto de Venta'), ('inventory', 'Inventario'), ('invoicing', 'Facturación'), ('purchases', 'Compras'), ('accounting', 'Contabilidad'), ('quotations', 'Cotizaciones'), ('reports', 'Reportes'), ('settings', 'Configuraciones')], max_length=50, verbose_name='Módulo')),
            ],
            options={
                'verbose_name': 'Permiso',
                'verbose_name_plural': 'Permisos',
                'db_table': 'users_permission',
                'indexes': [models.Index(fields=['module'], name='users_permi_module_9ef57d_idx'), models.Index(fields=['codename'], name='users_permi_codenam_6a0575_idx')],
                'unique_together': {('codename', 'module')},
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Fecha de actualización')),
                ('is_active', models.BooleanField(default=True, verbose_name='Activo')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Nombre')),
                ('description', models.TextField(blank=True, verbose_name='Descripción')),
                ('is_system_role', models.BooleanField(default=False, verbose_name='Rol del sistema')),
                ('color', models.CharField(default='#007bff', max_length=7, validators=[django.core.validators.RegexValidator(message='Color debe ser un código hexadecimal válido (ej: #007bff).', regex='^#[0-9A-Fa-f]{6}$')], verbose_name='Color')),
                ('permissions', models.ManyToManyField(blank=True, related_name='roles', to='users.permission', verbose_name='Permisos')),
            ],
            options={
                'verbose_name': 'Rol',
                'verbose_name_plural': 'Roles',
                'db_table': 'users_role',
            },
        ),
        migrations.CreateModel(
            name='UserCompany',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Fecha de actualización')),
                ('is_active', models.BooleanField(default=True, verbose_name='Activo')),
                ('is_admin', models.BooleanField(default=False, verbose_name='Administrador de empresa')),
                ('joined_at', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de incorporación')),
                ('branches', models.ManyToManyField(blank=True, related_name='user_companies', to='core.branch', verbose_name='Sucursales')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.company', verbose_name='Empresa')),
                ('roles', models.ManyToManyField(blank=True, related_name='user_companies', to='users.role', verbose_name='Roles')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Usuario')),
            ],
            options={
                'verbose_name': 'Usuario-Empresa',
                'verbose_name_plural': 'Usuarios-Empresas',
                'db_table': 'users_user_company',
            },
        ),
        migrations.AddField(
            model_name='user',
            name='companies',
            field=models.ManyToManyField(related_name='users', through='users.UserCompany', to='core.company', verbose_name='Empresas'),
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Fecha de actualización')),
                ('is_active', models.BooleanField(default=True, verbose_name='Activo')),
                ('position', models.CharField(blank=True, max_length=100, verbose_name='Cargo')),
                ('department', models.CharField(blank=True, max_length=100, verbose_name='Departamento')),
                ('employee_code', models.CharField(blank=True, max_length=20, null=True, unique=True, verbose_name='Código de empleado')),
                ('theme', models.CharField(choices=[('light', 'Claro'), ('dark', 'Oscuro'), ('auto', 'Automático')], default='light', max_length=20, verbose_name='Tema')),
                ('sidebar_collapsed', models.BooleanField(default=False, verbose_name='Sidebar colapsado')),
                ('email_notifications', models.BooleanField(default=True, verbose_name='Notificaciones por email')),
                ('sms_notifications', models.BooleanField(default=False, verbose_name='Notificaciones por SMS')),
                ('system_notifications', models.BooleanField(default=True, verbose_name='Notificaciones del sistema')),
                ('bio', models.TextField(blank=True, verbose_name='Biografía')),
                ('social_media', models.JSONField(blank=True, default=dict, verbose_name='Redes sociales')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL, verbose_name='Usuario')),
            ],
            options={
                'verbose_name': 'Perfil de usuario',
                'verbose_name_plural': 'Perfiles de usuario',
                'db_table': 'users_user_profile',
            },
        ),
        migrations.CreateModel(
            name='UserSession',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Fecha de creación')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Fecha de actualización')),
                ('is_active', models.BooleanField(default=True, verbose_name='Activo')),
                ('session_key', models.CharField(max_length=40, unique=True, verbose_name='Clave de sesión')),
                ('ip_address', models.GenericIPAddressField(verbose_name='Dirección IP')),
                ('user_agent', models.TextField(blank=True, verbose_name='User Agent')),
                ('login_at', models.DateTimeField(auto_now_add=True, verbose_name='Inicio de sesión')),
                ('last_activity', models.DateTimeField(auto_now=True, verbose_name='Última actividad')),
                ('logout_at', models.DateTimeField(blank=True, null=True, verbose_name='Cierre de sesión')),
                ('is_expired', models.BooleanField(default=False, verbose_name='Expirada')),
                ('branch', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.branch', verbose_name='Sucursal')),
                ('company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.company', verbose_name='Empresa')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to=settings.AUTH_USER_MODEL, verbose_name='Usuario')),
            ],
            options={
                'verbose_name': 'Sesión de usuario',
                'verbose_name_plural': 'Sesiones de usuario',
                'db_table': 'users_user_session',
            },
        ),
        migrations.AddIndex(
            model_name='role',
            index=models.Index(fields=['name'], name='users_role_name_dbf39a_idx'),
        ),
        migrations.AddIndex(
            model_name='role',
            index=models.Index(fields=['is_active'], name='users_role_is_acti_ed939d_idx'),
        ),
        migrations.AddIndex(
            model_name='usercompany',
            index=models.Index(fields=['user', 'company'], name='users_user__user_id_188709_idx'),
        ),
        migrations.AddIndex(
            model_name='usercompany',
            index=models.Index(fields=['is_admin'], name='users_user__is_admi_03a2a4_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='usercompany',
            unique_together={('user', 'company')},
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email'], name='users_user_email_6f2530_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['document_number'], name='users_user_documen_9d6cd6_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['is_active', 'is_staff'], name='users_user_is_acti_a79dc0_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['created_at'], name='users_user_created_cf865c_idx'),
        ),
        migrations.AddIndex(
            model_name='usersession',
            index=models.Index(fields=['user', 'login_at'], name='users_user__user_id_3dd5c1_idx'),
        ),
        migrations.AddIndex(
            model_name='usersession',
            index=models.Index(fields=['session_key'], name='users_user__session_c6bca5_idx'),
        ),
        migrations.AddIndex(
            model_name='usersession',
            index=models.Index(fields=['is_expired'], name='users_user__is_expi_0367a5_idx'),
        ),
    ]
