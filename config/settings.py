# -*- coding: utf-8 -*-
"""
Django settings for VENDO project.
Sistema de Ventas - Configuración Base

Generated by 'django-admin startproject' using Django 5.2.3.
Modificado para proyecto VENDO con esquemas PostgreSQL por módulo.
<<<<<<< Updated upstream
VERSIÓN LIMPIA - Compatible con Python 3.13
=======
VERSIÓN CORREGIDA - Compatible con Python 3.13 - SIN REDIS NI CELERY
ACTUALIZADO: Configuración de allauth corregida para evitar warnings
PANEL ADMIN PERSONALIZADO: Agregadas configuraciones necesarias
>>>>>>> Stashed changes
"""

from pathlib import Path
from decouple import config
import os
import sys

# Import crontab only if Celery is available
try:
    from celery.schedules import crontab
    CELERY_AVAILABLE = True
except ImportError:
    CELERY_AVAILABLE = False
    print("WARNING: Celery no disponible. Tareas programadas deshabilitadas.")

print("=== INICIO CARGA SETTINGS VENDO ===")

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
BASE_URL = config('BASE_URL', default='http://localhost:8000')

# ==========================================
# SECURITY SETTINGS
# ==========================================

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='django-insecure-w*wu%x8l%boibg+%#p(v*yi3vu#qe(5y4&*)(@)34p!2eq%+-1')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)

ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='localhost,127.0.0.1,0.0.0.0').split(',')

print(f"DEBUG: {DEBUG}")
print(f"ALLOWED_HOSTS: {ALLOWED_HOSTS}")

# ==========================================
# DIRECTORIO PARA CERTIFICADOS
# ==========================================

# Directorio para certificados (mantenido para futuro uso)
CERTIFICATES_PATH = os.path.join(BASE_DIR, 'private', 'certificates')

def create_secure_directories():
    """Crea directorios seguros para archivos sensibles"""
    
    # Directorio principal privado
    private_dir = os.path.join(BASE_DIR, 'private')
    os.makedirs(private_dir, exist_ok=True)
    os.chmod(private_dir, 0o700)  # Solo propietario
    
    # Directorio para certificados
    os.makedirs(CERTIFICATES_PATH, exist_ok=True)
    os.chmod(CERTIFICATES_PATH, 0o700)  # Solo propietario
    
    # Directorio para logs
    logs_dir = os.path.join(BASE_DIR, 'logs')
    os.makedirs(logs_dir, exist_ok=True)
    os.chmod(logs_dir, 0o755)

# Crear directorios al inicializar
create_secure_directories()

# ==========================================
# APPLICATION DEFINITION
# ==========================================

# Django core apps
DJANGO_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    'django.contrib.sites',
]

# Third party apps
THIRD_PARTY_APPS = [
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',
    'django_filters',
    'crispy_forms',
    'crispy_bootstrap5',
    # Allauth apps
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
]

# Celery apps (solo si está disponible)
if CELERY_AVAILABLE:
    THIRD_PARTY_APPS.extend([
        'django_celery_beat',
        'django_celery_results',
    ])

# Local VENDO apps - organizadas por prioridad
LOCAL_APPS = [
    # Core system (base, usuarios, configuraciones)
    'apps.core',
    'apps.users',
    #'apps.settings',
    
    # Business modules (módulos de negocio)
    'apps.invoicing',
    'apps.inventory',
]

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS

print(f"INSTALLED_APPS cargadas: {len(LOCAL_APPS)} apps locales de {len(INSTALLED_APPS)} apps totales")

# Configuración del sistema de aprobación de usuarios
USER_APPROVAL_SETTINGS = {
    # Tiempo máximo de espera antes de limpieza automática (días)
    'MAX_PENDING_DAYS': config('MAX_PENDING_DAYS', default=30, cast=int),
    
    # Enviar recordatorios automáticos a administradores
    'SEND_ADMIN_REMINDERS': config('SEND_ADMIN_REMINDERS', default=True, cast=bool),
    
    # Intervalo de recordatorios (horas)
    'REMINDER_INTERVAL_HOURS': config('REMINDER_INTERVAL_HOURS', default=24, cast=int),
    
    # Auto-aprobar usuarios con dominios específicos (ejemplo: @tuempresa.com)
    'AUTO_APPROVE_DOMAINS': config('AUTO_APPROVE_DOMAINS', default='').split(','),
    
    # Requerir verificación de email antes de aprobación
    'REQUIRE_EMAIL_VERIFICATION': config('REQUIRE_EMAIL_VERIFICATION', default=False, cast=bool),
    
    # Tiempo de sesión para usuarios en sala de espera (segundos)
    'WAITING_ROOM_SESSION_TIMEOUT': config('WAITING_ROOM_SESSION_TIMEOUT', default=3600, cast=int),
    
    # Notificar a administradores inmediatamente
    'INSTANT_ADMIN_NOTIFICATION': config('INSTANT_ADMIN_NOTIFICATION', default=True, cast=bool),
}

# ==========================================
<<<<<<< Updated upstream
# MIDDLEWARE CONFIGURATION
=======
# MIDDLEWARE CONFIGURATION (CORREGIDO)
>>>>>>> Stashed changes
# ==========================================

MIDDLEWARE = [
    # Security middleware (siempre primero)
    'django.middleware.security.SecurityMiddleware',
    
    # CORS middleware (temprano para APIs)
    'corsheaders.middleware.CorsMiddleware',
    
    # Session middleware
    'django.contrib.sessions.middleware.SessionMiddleware',
    
    # Localization
    'django.middleware.locale.LocaleMiddleware',
    
    # Common middleware
    'django.middleware.common.CommonMiddleware',
    
    # CSRF protection
    'django.middleware.csrf.CsrfViewMiddleware',
    
    # Authentication
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    
    # ALLAUTH MIDDLEWARE (REQUERIDO)
    'allauth.account.middleware.AccountMiddleware',
    
    # Messages framework
    'django.contrib.messages.middleware.MessageMiddleware',
    
<<<<<<< Updated upstream
=======
    # MIDDLEWARES PERSONALIZADOS (COMENTADOS HASTA CREAR)
    # 'apps.users.middleware.PendingUsersNotificationMiddleware',  # Para notificaciones
    # 'apps.users.middleware.UserApprovalMiddleware',              # Para redirecciones automáticas
    # 'apps.core.middleware.CompanyMiddleware',                     # Gestión de empresa
    # 'apps.core.middleware.AuditMiddleware',                       # Auditoría automática
    # 'apps.core.middleware.SecurityMiddleware',                    # Seguridad adicional
    # 'apps.core.middleware.PerformanceMiddleware',                 # Monitoreo rendimiento
    
>>>>>>> Stashed changes
    # Clickjacking protection (siempre al final)
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# ==========================================
# LOGGING CONFIGURATION
# ==========================================

# Crear directorio de logs si no existe
LOGS_DIR = BASE_DIR / 'logs'
LOGS_DIR.mkdir(exist_ok=True)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'file': {
            'class': 'logging.FileHandler',
            'filename': LOGS_DIR / 'vendo.log',
            'formatter': 'verbose',
        },
        'approval_file': {
            'class': 'logging.FileHandler',
            'filename': LOGS_DIR / 'user_approval.log',
            'formatter': 'verbose',
        },
        'admin_file': {
            'class': 'logging.FileHandler',
            'filename': LOGS_DIR / 'admin.log',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
        },
        'apps.users.services': {
            'handlers': ['console', 'approval_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'apps.users.middleware': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'apps.core.admin_views': {
            'handlers': ['console', 'admin_file'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

ROOT_URLCONF = 'config.urls'

# Sites framework (REQUERIDO POR ALLAUTH)
SITE_ID = 1

# ==========================================
# AUTHENTICATION CONFIGURATION
# ==========================================

# Authentication backends
AUTHENTICATION_BACKENDS = [
    # Backends de Django por defecto
    'django.contrib.auth.backends.ModelBackend',
    
    # Backends de allauth
    'allauth.account.auth_backends.AuthenticationBackend',
]

# URLs de autenticación
LOGIN_URL = '/users/login/'
LOGIN_REDIRECT_URL = '/dashboard/'
LOGOUT_REDIRECT_URL = '/users/login/'

# ==========================================
# CONFIGURACIÓN DE ALLAUTH
# ==========================================

ACCOUNT_LOGIN_METHODS = ['email']
ACCOUNT_SIGNUP_FIELDS = ['email*', 'password1*', 'password2*']
ACCOUNT_EMAIL_VERIFICATION = 'optional'
ACCOUNT_USER_MODEL_USERNAME_FIELD = 'username'
ACCOUNT_USER_MODEL_EMAIL_FIELD = 'email'
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_SESSION_REMEMBER = True
ACCOUNT_RATE_LIMITS = {
    'login_failed': '5/5m',
}

ACCOUNT_LOGOUT_REDIRECT_URL = '/accounts/login/'

SOCIALACCOUNT_AUTO_SIGNUP = True
SOCIALACCOUNT_EMAIL_REQUIRED = True
SOCIALACCOUNT_EMAIL_VERIFICATION = 'optional'
SOCIALACCOUNT_EMAIL_AUTHENTICATION = True
SOCIALACCOUNT_EMAIL_AUTHENTICATION_AUTO_CONNECT = True
SOCIALACCOUNT_LOGIN_ON_GET = True

SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        },
        'OAUTH_PKCE_ENABLED': True,
        'FETCH_USERINFO': True,
        'VERIFIED_EMAIL': True,
        'VERSION': 'v2',
    }
}

# ==========================================
# TEMPLATES CONFIGURATION
# ==========================================

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / 'templates',
            BASE_DIR / 'apps' / 'core' / 'templates',
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.i18n',
                'django.template.context_processors.media',
                'django.template.context_processors.static',
                'django.template.context_processors.tz',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'

print("=== CONFIGURANDO DATABASES ===")

# ==========================================
# DATABASE CONFIGURATION WITH SCHEMAS
# ==========================================

try:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': config('DB_NAME'),
            'USER': config('DB_USER'),
            'PASSWORD': config('DB_PASSWORD'),
            'HOST': config('DB_HOST'),
            'PORT': config('DB_PORT'),
            'OPTIONS': {
                'options': '-c search_path=vendo_core,public',
            },
            'CONN_MAX_AGE': 60,
            'CONN_HEALTH_CHECKS': True,
        },
    }
    print("OK: DATABASES configurado exitosamente")
except Exception as e:
    print(f"ERROR: Error configurando DATABASES: {e}")

# Database Router for Schema Management 
DATABASE_ROUTERS = ['config.db_router.SchemaRouter']

# Database Schema Mapping
DATABASE_APPS_MAPPING = {
    # Apps core
    'core': 'vendo_core',
    'users': 'vendo_core',
    'settings': 'vendo_core',
    
    # Apps de negocio
    'api': 'vendo_core',
    'pos': 'vendo_pos',
    'inventory': 'vendo_inventory',
    'invoicing': 'vendo_invoicing',
    'purchases': 'vendo_purchases',
    'accounting': 'vendo_accounting',
    'quotations': 'vendo_quotations',
    'reports': 'vendo_reports',
    
    # Apps built-in de Django
    'admin': 'vendo_core',
    'auth': 'vendo_core',
    'contenttypes': 'vendo_core',
    'sessions': 'vendo_core',
    'messages': 'vendo_core',
    'staticfiles': 'public',
    'sites': 'vendo_core',
    
    # Third party apps
    'rest_framework': 'vendo_core',
    'authtoken': 'vendo_core',
    'corsheaders': 'public',
    'django_filters': 'public',
    'allauth': 'vendo_core',
    'account': 'vendo_core',
    'socialaccount': 'vendo_core',
}

# Celery apps (solo si está disponible)
if CELERY_AVAILABLE:
    DATABASE_APPS_MAPPING.update({
        'django_celery_beat': 'vendo_core',
        'django_celery_results': 'vendo_core',
    })

print("=== DATABASES Y ROUTER CONFIGURADOS ===")

# ==========================================
# USER MODEL CONFIGURATION
# ==========================================

<<<<<<< Updated upstream
=======
# Custom User Model
>>>>>>> Stashed changes
AUTH_USER_MODEL = 'users.User'

# ==========================================
# PASSWORD VALIDATION
# ==========================================

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 8,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# ==========================================
# CELERY CONFIGURATION
# ==========================================

if CELERY_AVAILABLE:
    CELERY_BROKER_URL = config('CELERY_BROKER_URL', default='redis://localhost:6379/0')
    CELERY_RESULT_BACKEND = config('CELERY_RESULT_BACKEND', default='redis://localhost:6379/0')
    
    CELERY_ACCEPT_CONTENT = ['json']
    CELERY_TASK_SERIALIZER = 'json'
    CELERY_RESULT_SERIALIZER = 'json'
    CELERY_TIMEZONE = 'America/Guayaquil'
    CELERY_ENABLE_UTC = True
    
    CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'
    
    # Configuración básica de colas
    CELERY_TASK_DEFAULT_QUEUE = 'default'
    
    # Tareas programadas básicas
    CELERY_BEAT_SCHEDULE = {
        # Ejemplo de tarea programada
        'cleanup-temp-files': {
            'task': 'apps.core.tasks.cleanup_temp_files',
            'schedule': crontab(hour=2, minute=0),  # 2:00 AM diario
        },
    }
    
    print("=== CELERY CONFIGURADO ===")
else:
    CELERY_TASK_ALWAYS_EAGER = True
    CELERY_TASK_EAGER_PROPAGATES = True

# ==========================================
# INTERNATIONALIZATION
# ==========================================

LANGUAGE_CODE = 'es-ec'
TIME_ZONE = 'America/Guayaquil'
USE_I18N = True
USE_TZ = True

LANGUAGES = [
    ('es', 'Español'),
    ('en', 'English'),
]

LOCALE_PATHS = [
    BASE_DIR / 'locale',
]

# ==========================================
# STATIC FILES CONFIGURATION
# ==========================================

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

STATICFILES_DIRS = [
    BASE_DIR / 'static',
    BASE_DIR / 'apps' / 'core' / 'static',
]

STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
]

# ==========================================
# CACHE CONFIGURATION (UNIFICADO Y CORREGIDO)
# ==========================================

print("=== CONFIGURANDO CACHE (LOCAL) ===")

try:
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
            'LOCATION': 'vendo-default',
            'TIMEOUT': 300,  # 5 minutos por defecto
            'OPTIONS': {
                'MAX_ENTRIES': 1000,
                'CULL_FREQUENCY': 3,
            }
        },
        'sessions': {
            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
            'LOCATION': 'vendo-sessions',
            'TIMEOUT': 86400,  # 24 horas
            'OPTIONS': {
                'MAX_ENTRIES': 500,
                'CULL_FREQUENCY': 3,
            }
        },
        'local_memory': {
            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
            'LOCATION': 'vendo-locmem',
            'TIMEOUT': 60,
            'OPTIONS': {
                'MAX_ENTRIES': 300,
                'CULL_FREQUENCY': 3,
            }
        },
        'user_approval': {
            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
            'LOCATION': 'vendo-user-approval',
            'TIMEOUT': 300,  # 5 minutos
            'OPTIONS': {
                'MAX_ENTRIES': 100,
                'CULL_FREQUENCY': 3,
            }
        },
    }
    print("OK: CACHES configurado (memoria local)")
except Exception as e:
    print(f"ERROR: Error en CACHES: {e}")

# ==========================================
# MEDIA FILES CONFIGURATION
# ==========================================

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Media subdirectories
MEDIA_DIRS = {
    'LOGOS': 'logos',
    'CERTIFICATES': 'certificates',
    'PRODUCTS': 'products',
    'INVOICES': 'invoices',
    'DOCUMENTS': 'documents',
    'REPORTS': 'reports',
    'BACKUPS': 'backups',
    'AVATARS': 'avatars',
}

# ==========================================
# SESSION CONFIGURATION (SIN REDIS)
# ==========================================

# Cambiar a usar base de datos para sesiones
SESSION_ENGINE = 'django.contrib.sessions.backends.db'  # Cambio principal
SESSION_COOKIE_AGE = 86400  # 24 horas
SESSION_COOKIE_NAME = 'vendo_sessionid'
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_SAVE_EVERY_REQUEST = True
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SECURE = not DEBUG  # Solo HTTPS en producción

# ==========================================
# DEFAULT AUTO FIELD
# ==========================================

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ==========================================
# LOGGING CONFIGURATION
# ==========================================

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'vendo.log'),
            'formatter': 'verbose',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['console', 'file'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'apps': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'celery': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

# ==========================================
# REST FRAMEWORK CONFIGURATION
# ==========================================

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 25,
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser',
    ],
    'DATETIME_FORMAT': '%d/%m/%Y %H:%M:%S',
    'DATE_FORMAT': '%d/%m/%Y',
}

# ==========================================
# CORS CONFIGURATION
# ==========================================

CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://localhost:8080",
    "http://127.0.0.1:8080",
    "http://localhost:8000",
    "http://127.0.0.1:8000",
]

CORS_ALLOW_CREDENTIALS = True

CORS_ALLOWED_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'x-company-id',
    'x-branch-id',
]

# ==========================================
<<<<<<< Updated upstream
# CACHE CONFIGURATION
# ==========================================

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'vendo-cache',
        'TIMEOUT': 300,
        'OPTIONS': {
            'MAX_ENTRIES': 1000,
            'CULL_FREQUENCY': 3,
        }
    },
    'sessions': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'vendo-sessions',
        'TIMEOUT': 86400,
        'OPTIONS': {
            'MAX_ENTRIES': 500,
            'CULL_FREQUENCY': 3,
        }
    },
}

# ==========================================
# SESSION CONFIGURATION
# ==========================================

SESSION_ENGINE = 'django.contrib.sessions.backends.db'
SESSION_COOKIE_AGE = 86400  # 24 horas
SESSION_COOKIE_NAME = 'vendo_sessionid'
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_SAVE_EVERY_REQUEST = True
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SECURE = not DEBUG
SESSION_COOKIE_SAMESITE = 'Lax'

# ==========================================
# SECURITY CONFIGURATION
# ==========================================

CSRF_COOKIE_SECURE = not DEBUG
CSRF_COOKIE_HTTPONLY = True
CSRF_COOKIE_SAMESITE = 'Lax'

FILE_UPLOAD_MAX_MEMORY_SIZE = 5242880  # 5MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 5242880  # 5MB
FILE_UPLOAD_PERMISSIONS = 0o600

SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'

if not DEBUG:
    SECURE_SSL_REDIRECT = True
    SECURE_HSTS_SECONDS = 31536000
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True

# ==========================================
# EMAIL CONFIGURATION
# ==========================================

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
=======
# EMAIL CONFIGURATION
# ==========================================

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'  # Desarrollo
>>>>>>> Stashed changes
EMAIL_HOST = config('EMAIL_HOST', default='smtp.gmail.com')
EMAIL_PORT = config('EMAIL_PORT', default=587, cast=int)
EMAIL_USE_TLS = config('EMAIL_USE_TLS', default=True, cast=bool)
EMAIL_HOST_USER = config('EMAIL_HOST_USER', default='')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD', default='')
DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL', default='noreply@vendo.com')
SERVER_EMAIL = DEFAULT_FROM_EMAIL

# ==========================================
# CRISPY FORMS CONFIGURATION
# ==========================================

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

# ==========================================
# MESSAGE TAGS FOR BOOTSTRAP
# ==========================================

try:
    from django.contrib.messages import constants as messages
    MESSAGE_TAGS = {
        messages.DEBUG: 'debug',
        messages.INFO: 'info',
        messages.SUCCESS: 'success',
        messages.WARNING: 'warning',
        messages.ERROR: 'danger',
    }
except Exception as e:
    print(f"ERROR: Error en MESSAGE_TAGS: {e}")

# ==========================================
# DEVELOPMENT SETTINGS
# ==========================================

if DEBUG:
    print("Aplicando configuraciones de desarrollo...")
    try:
        # Add development apps (solo las que están instaladas)
        development_apps = []
        
        try:
            import django_extensions
            development_apps.append('django_extensions')
        except ImportError:
            pass
            
        try:
            import debug_toolbar
            development_apps.append('debug_toolbar')
        except ImportError:
            pass
        
        if development_apps:
            INSTALLED_APPS += development_apps
            print(f"Apps de desarrollo agregadas: {development_apps}")
        
        # Add debug toolbar middleware (solo si está instalado)
        if 'debug_toolbar' in development_apps:
            MIDDLEWARE += [
                'debug_toolbar.middleware.DebugToolbarMiddleware',
            ]
            
            # Internal IPs for debug toolbar
            INTERNAL_IPS = [
                '127.0.0.1',
                'localhost',
                '0.0.0.0',
            ]
            
            # Debug toolbar configuration
            DEBUG_TOOLBAR_CONFIG = {
                'SHOW_TOOLBAR_CALLBACK': lambda request: DEBUG,
                'SHOW_COLLAPSED': True,
                'SHOW_TEMPLATE_CONTEXT': True,
            }
        
        # Allow all origins in development
        CORS_ALLOW_ALL_ORIGINS = True
        
        # Disable template caching in development
        for template_engine in TEMPLATES:
            template_engine['OPTIONS']['debug'] = True
        
        print(f"OK: Configuración de desarrollo aplicada. INSTALLED_APPS: {len(INSTALLED_APPS)} apps")
        
    except Exception as e:
        print(f"ERROR: Error en DEVELOPMENT SETTINGS: {e}")

# ==========================================
# TESTING CONFIGURATION
# ==========================================

if 'test' in sys.argv or 'pytest' in sys.modules:
    print("=== CONFIGURACIÓN DE TESTING ACTIVADA ===")
    
    # Base de datos en memoria para tests
    DATABASES['default'] = {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': ':memory:'
    }
    
    # Deshabilitar Celery en tests
    CELERY_TASK_ALWAYS_EAGER = True
    CELERY_TASK_EAGER_PROPAGATES = True
    
    # Cache simple para tests
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        }
    }
    
    # Email backend para tests
    EMAIL_BACKEND = 'django.core.mail.backends.locmem.EmailBackend'

print("=== FIN CONFIGURACIÓN VENDO LIMPIA ===")
print(f"DATABASES: {list(DATABASES.keys())}")
print(f"APPS TOTALES: {len(INSTALLED_APPS)}")
print(f"MIDDLEWARE STACK: {len(MIDDLEWARE)} middlewares")
print(f"ESQUEMAS CONFIGURADOS: {len(DATABASE_APPS_MAPPING)}")
print(f"CERTIFICADOS: {CERTIFICATES_PATH}")
if CELERY_AVAILABLE:
    print("CELERY DISPONIBLE")
else:
    print("CELERY NO DISPONIBLE")
print("✅ CONFIGURACIÓN LIMPIA DE VENDO CARGADA EXITOSAMENTE")