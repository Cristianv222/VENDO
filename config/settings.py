# -*- coding: utf-8 -*-
"""
Django settings for VENDO project.
Sistema de Ventas con Integración SRI y Esquemas PostgreSQL

Generated by 'django-admin startproject' using Django 5.2.3.
Modificado para proyecto VENDO con esquemas PostgreSQL por módulo.
VERSIÓN CORREGIDA - Compatible con Python 3.13 - SIN REDIS NI CELERY
"""

from pathlib import Path
from decouple import config
import os

print("=== INICIO CARGA SETTINGS VENDO ===")

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# ==========================================
# SECURITY SETTINGS
# ==========================================

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='django-insecure-w*wu%x8l%boibg+%#p(v*yi3vu#qe(5y4&*)(@)34p!2eq%+-1')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)

ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='localhost,127.0.0.1,0.0.0.0').split(',')

print(f"DEBUG: {DEBUG}")
print(f"ALLOWED_HOSTS: {ALLOWED_HOSTS}")

# ==========================================
# APPLICATION DEFINITION
# ==========================================

# Django core apps
DJANGO_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    'django.contrib.sites',
]

# Third party apps
THIRD_PARTY_APPS = [
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',
    'django_filters',
    'crispy_forms',
    'crispy_bootstrap5',
    # Allauth apps
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
]

# Local VENDO apps - organizadas por prioridad
LOCAL_APPS = [
    # Core system (base, usuarios, configuraciones)
    'apps.core',
    'apps.users',
    'apps.settings',
    
    # Business modules (módulos de negocio)
    #'apps.pos',
    #'apps.invoicing',
    'apps.inventory',
    #'apps.purchases',
    #'apps.accounting',
    #'apps.quotations',
    #'apps.reports',
]

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS

print(f"INSTALLED_APPS cargadas: {len(INSTALLED_APPS)} apps")

# ==========================================
# MIDDLEWARE CONFIGURATION (CORREGIDO CON ALLAUTH)
# ==========================================

MIDDLEWARE = [
    # Security middleware (siempre primero)
    'django.middleware.security.SecurityMiddleware',
    
    # CORS middleware (temprano para APIs)
    'corsheaders.middleware.CorsMiddleware',
    
    # Session middleware
    'django.contrib.sessions.middleware.SessionMiddleware',
    
    # Localization
    'django.middleware.locale.LocaleMiddleware',
    
    # Common middleware
    'django.middleware.common.CommonMiddleware',
    
    # CSRF protection
    'django.middleware.csrf.CsrfViewMiddleware',
    
    # Authentication
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    
    # ALLAUTH MIDDLEWARE (REQUERIDO) - DEBE IR DESPUÉS DE AuthenticationMiddleware
    'allauth.account.middleware.AccountMiddleware',
    
    # Messages framework (DEBE IR ANTES de los middlewares personalizados)
    'django.contrib.messages.middleware.MessageMiddleware',
    
    # VENDO Custom Middlewares (DESPUÉS del MessageMiddleware) - Comentados hasta crear
    # 'apps.core.middleware.CompanyMiddleware',       # Gestión de empresa
    # 'apps.core.middleware.AuditMiddleware',         # Auditoría automática
    # 'apps.core.middleware.SecurityMiddleware',      # Seguridad adicional
    # 'apps.core.middleware.PerformanceMiddleware',   # Monitoreo rendimiento
    
    # Clickjacking protection (siempre al final)
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

# Sites framework (REQUERIDO POR ALLAUTH)
SITE_ID = 1

# ==========================================
# AUTHENTICATION CONFIGURATION (CON ALLAUTH)
# ==========================================

# Authentication backends
AUTHENTICATION_BACKENDS = [
    # Backends de Django por defecto
    'django.contrib.auth.backends.ModelBackend',
    
    # Backends de allauth
    'allauth.account.auth_backends.AuthenticationBackend',
    
    # Tus backends personalizados (si existen)
    # 'apps.users.authentication.EmailOrUsernameModelBackend',
    # 'apps.users.authentication.CompanyAwareBackend',
]

# URLs de autenticación
LOGIN_URL = '/accounts/login/'           # Cambiado para allauth
LOGIN_REDIRECT_URL = '/dashboard/'       # Después del login exitoso
LOGOUT_REDIRECT_URL = '/accounts/login/' # Después del logout

# Configuración de allauth
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = 'optional'  # o 'mandatory' si quieres verificación obligatoria
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_USER_MODEL_USERNAME_FIELD = 'username'
ACCOUNT_USER_MODEL_EMAIL_FIELD = 'email'

# Auto-login después de registro social
SOCIALACCOUNT_AUTO_SIGNUP = True
SOCIALACCOUNT_EMAIL_REQUIRED = True
SOCIALACCOUNT_EMAIL_VERIFICATION = 'optional'

# Configuración de proveedores sociales
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        },
        'OAUTH_PKCE_ENABLED': True,
        'FETCH_USERINFO': True,
    }
}

# URLs de redirección después del logout
ACCOUNT_LOGOUT_REDIRECT_URL = '/accounts/login/'

# Conectar automáticamente cuentas sociales con usuarios existentes por email
SOCIALACCOUNT_EMAIL_AUTHENTICATION = True
SOCIALACCOUNT_EMAIL_AUTHENTICATION_AUTO_CONNECT = True

# Adaptadores personalizados (descomenta cuando los tengas)
# ACCOUNT_ADAPTER = 'apps.users.adapters.CustomAccountAdapter'
# SOCIALACCOUNT_ADAPTER = 'apps.users.adapters.CustomSocialAccountAdapter'

# Formularios personalizados (descomenta cuando los tengas)
# ACCOUNT_FORMS = {
#     'login': 'apps.users.forms.CustomAuthenticationForm',
# }

# ==========================================
# TEMPLATES CONFIGURATION
# ==========================================

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / 'templates',
            BASE_DIR / 'apps' / 'core' / 'templates',
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                # Django built-in context processors
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.i18n',
                'django.template.context_processors.media',
                'django.template.context_processors.static',
                'django.template.context_processors.tz',
                
                # VENDO custom context processors (comentados hasta crear)
                # 'apps.core.context_processors.company_context',
                # 'apps.core.context_processors.branch_context',
                # 'apps.core.context_processors.user_context',
                # 'apps.core.context_processors.system_context',
                # 'apps.core.context_processors.navigation_context',
                # 'apps.core.context_processors.menu_context',
                # 'apps.core.context_processors.notifications_context',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'

print("=== CONFIGURANDO DATABASES ===")

# ==========================================
# DATABASE CONFIGURATION WITH SCHEMAS
# ==========================================

try:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': config('DB_NAME'),
            'USER': config('DB_USER'),
            'PASSWORD': config('DB_PASSWORD'),
            'HOST': config('DB_HOST'),
            'PORT': config('DB_PORT'),
            'OPTIONS': {
                'options': '-c search_path=vendo_inventory,vendo_pos,vendo_invoicing,vendo_core,public',
            },
            'CONN_MAX_AGE': 60,  # Reutilizar conexiones por 60 segundos
            'CONN_HEALTH_CHECKS': True,  # Verificar salud de conexiones
        },
    }
    print("OK: DATABASES configurado exitosamente")
except Exception as e:
    print(f"ERROR: Error configurando DATABASES: {e}")
    import traceback
    traceback.print_exc()

# Database Router for Schema Management (comentado hasta crear)
# DATABASE_ROUTERS = ['config.db_router.SchemaRouter']

# Database Schema Mapping - Esquemas por módulo
DATABASE_APPS_MAPPING = {
    # Apps core (usuarios, empresa, configuración base)
    'core': 'vendo_core',
    'users': 'vendo_core',
    'settings': 'vendo_core',
    
    # Apps de negocio (cada una en su esquema)
    'api': 'vendo_core',  # API va en core por ahora
    'pos': 'vendo_pos',
    'inventory': 'vendo_inventory',
    'invoicing': 'vendo_invoicing',
    'purchases': 'vendo_purchases',
    'accounting': 'vendo_accounting',
    'quotations': 'vendo_quotations',
    'reports': 'vendo_reports',
    
    # Apps built-in de Django (esquema público)
    'admin': 'public',
    'auth': 'public',
    'contenttypes': 'public',
    'sessions': 'public',
    'messages': 'public',
    'staticfiles': 'public',
    'sites': 'public',
    
    # Third party apps (esquema público)
    'rest_framework': 'public',
    'authtoken': 'public',
    'corsheaders': 'public',
    'django_filters': 'public',
    'allauth': 'public',
    'account': 'public',
    'socialaccount': 'public',
}

print("=== DATABASES Y ROUTER CONFIGURADOS ===")

# ==========================================
# USER MODEL CONFIGURATION
# ==========================================

# Custom User Model (descomenta cuando esté listo)
AUTH_USER_MODEL = 'users.User'

# ==========================================
# PASSWORD VALIDATION
# ==========================================

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 8,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# ==========================================
# INTERNATIONALIZATION
# ==========================================

LANGUAGE_CODE = 'es-ec'
TIME_ZONE = 'America/Guayaquil'
USE_I18N = True
USE_TZ = True

LANGUAGES = [
    ('es', 'Español'),
    ('en', 'English'),
]

LOCALE_PATHS = [
    BASE_DIR / 'locale',
]

# ==========================================
# STATIC FILES CONFIGURATION
# ==========================================

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

STATICFILES_DIRS = [
    BASE_DIR / 'static',
    BASE_DIR / 'apps' / 'core' / 'static',
]

STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
]

# ==========================================
# MEDIA FILES CONFIGURATION
# ==========================================

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Media subdirectories
MEDIA_DIRS = {
    'LOGOS': 'logos',
    'CERTIFICATES': 'certificates',
    'PRODUCTS': 'products',
    'INVOICES': 'invoices',
    'DOCUMENTS': 'documents',
    'REPORTS': 'reports',
    'BACKUPS': 'backups',
    'AVATARS': 'avatars',
}

# ==========================================
# DEFAULT AUTO FIELD
# ==========================================

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ==========================================
# REST FRAMEWORK CONFIGURATION
# ==========================================

print("=== CONFIGURANDO REST FRAMEWORK ===")

try:
    REST_FRAMEWORK = {
        'DEFAULT_AUTHENTICATION_CLASSES': [
            'rest_framework.authentication.SessionAuthentication',
            'rest_framework.authentication.TokenAuthentication',
        ],
        'DEFAULT_PERMISSION_CLASSES': [
            # 'apps.core.permissions.IsAuthenticatedAndActive',  # Comentado hasta crear
            # 'apps.core.permissions.HasCompanyAccess',          # Comentado hasta crear
            'rest_framework.permissions.IsAuthenticated',  # Usar por defecto por ahora
        ],
        'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
        'PAGE_SIZE': 25,
        'DEFAULT_FILTER_BACKENDS': [
            'django_filters.rest_framework.DjangoFilterBackend',
            'rest_framework.filters.SearchFilter',
            'rest_framework.filters.OrderingFilter',
        ],
        'DEFAULT_RENDERER_CLASSES': [
            'rest_framework.renderers.JSONRenderer',
            'rest_framework.renderers.BrowsableAPIRenderer',
        ],
        'DEFAULT_PARSER_CLASSES': [
            'rest_framework.parsers.JSONParser',
            'rest_framework.parsers.FormParser',
            'rest_framework.parsers.MultiPartParser',
        ],
        # 'EXCEPTION_HANDLER': 'apps.core.exceptions.custom_exception_handler',  # Comentado hasta crear
        'DATETIME_FORMAT': '%d/%m/%Y %H:%M:%S',
        'DATE_FORMAT': '%d/%m/%Y',
    }
    print("OK: REST_FRAMEWORK configurado")
except Exception as e:
    print(f"ERROR: Error en REST_FRAMEWORK: {e}")

# ==========================================
# CORS CONFIGURATION
# ==========================================

CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",    # React dev server
    "http://127.0.0.1:3000",
    "http://localhost:8080",    # Vue dev server
    "http://127.0.0.1:8080",
    "http://localhost:8000",    # Django dev server
    "http://127.0.0.1:8000",
]

CORS_ALLOW_CREDENTIALS = True

CORS_ALLOWED_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'x-company-id',
    'x-branch-id',
]

# ==========================================
# CACHE CONFIGURATION (SIN REDIS)
# ==========================================

print("=== CONFIGURANDO CACHE (LOCAL) ===")

try:
    # Configuración de cache local (sin Redis)
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
            'LOCATION': 'vendo-default',
            'TIMEOUT': 300,  # 5 minutos por defecto
            'OPTIONS': {
                'MAX_ENTRIES': 1000,
                'CULL_FREQUENCY': 3,
            }
        },
        'sessions': {
            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
            'LOCATION': 'vendo-sessions',
            'TIMEOUT': 86400,  # 24 horas
            'OPTIONS': {
                'MAX_ENTRIES': 500,
                'CULL_FREQUENCY': 3,
            }
        },
        'local_memory': {
            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
            'LOCATION': 'vendo-locmem',
            'TIMEOUT': 60,
            'OPTIONS': {
                'MAX_ENTRIES': 300,
                'CULL_FREQUENCY': 3,
            }
        }
    }
    print("OK: CACHES configurado (memoria local)")
except Exception as e:
    print(f"ERROR: Error en CACHES: {e}")

# ==========================================
# SESSION CONFIGURATION (SIN REDIS)
# ==========================================

# Cambiar a usar base de datos para sesiones
SESSION_ENGINE = 'django.contrib.sessions.backends.db'  # Cambio principal
SESSION_COOKIE_AGE = 86400  # 24 horas
SESSION_COOKIE_NAME = 'vendo_sessionid'
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_SAVE_EVERY_REQUEST = True
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SECURE = not DEBUG  # Solo HTTPS en producción

# ==========================================
# EMAIL CONFIGURATION
# ==========================================

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'  # Para desarrollo
EMAIL_HOST = config('EMAIL_HOST', default='smtp.gmail.com')
EMAIL_PORT = config('EMAIL_PORT', default=587, cast=int)
EMAIL_USE_TLS = config('EMAIL_USE_TLS', default=True, cast=bool)
EMAIL_HOST_USER = config('EMAIL_HOST_USER', default='')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD', default='')
DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL', default='noreply@vendo.com')
SERVER_EMAIL = DEFAULT_FROM_EMAIL

# ==========================================
# CRISPY FORMS CONFIGURATION
# ==========================================

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

# ==========================================
# MESSAGE TAGS FOR BOOTSTRAP
# ==========================================

try:
    from django.contrib.messages import constants as messages
    MESSAGE_TAGS = {
        messages.DEBUG: 'debug',
        messages.INFO: 'info',
        messages.SUCCESS: 'success',
        messages.WARNING: 'warning',
        messages.ERROR: 'danger',
    }
    print("OK: MESSAGE_TAGS configurado")
except Exception as e:
    print(f"ERROR: Error en MESSAGE_TAGS: {e}")

print("=== CONFIGURACIONES DE DESARROLLO/PRODUCCIÓN ===")

# ==========================================
# DEVELOPMENT SETTINGS
# ==========================================

if DEBUG:
    print("Aplicando configuraciones de desarrollo...")
    try:
        # Add development apps
        INSTALLED_APPS += [
            'django_extensions',
            'debug_toolbar',
        ]
        
        # Add debug toolbar middleware
        MIDDLEWARE += [
            'debug_toolbar.middleware.DebugToolbarMiddleware',
        ]
        
        # Internal IPs for debug toolbar
        INTERNAL_IPS = [
            '127.0.0.1',
            'localhost',
            '0.0.0.0',
        ]
        
        # Debug toolbar configuration
        DEBUG_TOOLBAR_CONFIG = {
            'SHOW_TOOLBAR_CALLBACK': lambda request: DEBUG,
            'SHOW_COLLAPSED': True,
            'SHOW_TEMPLATE_CONTEXT': True,
        }
        
        # Allow all origins in development
        CORS_ALLOW_ALL_ORIGINS = True
        
        # Disable template caching in development
        for template_engine in TEMPLATES:
            template_engine['OPTIONS']['debug'] = True
        
        print(f"OK: Configuración de desarrollo aplicada. INSTALLED_APPS: {len(INSTALLED_APPS)} apps")
        
    except Exception as e:
        print(f"ERROR: Error en DEVELOPMENT SETTINGS: {e}")
        import traceback
        traceback.print_exc()

print("=== FIN SETTINGS VENDO ===")
print(f"DATABASES final: {list(DATABASES.keys()) if 'DATABASES' in globals() else 'NO DEFINIDO'}")
print(f"APPS TOTALES: {len(INSTALLED_APPS)}")
print(f"MIDDLEWARE STACK: {len(MIDDLEWARE)} middlewares")
print(f"ESQUEMAS CONFIGURADOS: {len(DATABASE_APPS_MAPPING)}")
print("OK: CONFIGURACIÓN COMPLETA DE VENDO CARGADA EXITOSAMENTE")

# ==================== CONFIGURACIÓN IMPRESORA ZEBRA USB ====================
# Configuración de impresora Zebra conectada por USB
ZEBRA_USB_PORT = None                   # Puerto COM (None para detección automática)
ZEBRA_BAUDRATE = 9600                   # Velocidad de comunicación
ZEBRA_TIMEOUT = 5                       # Timeout en segundos
ZEBRA_PRINTER_NAME = 'ZDesigner'        # Nombre de la impresora en Windows

# Ejemplos de configuración:
# ZEBRA_USB_PORT = 'COM3'              # Windows (puerto específico)
# ZEBRA_USB_PORT = '/dev/ttyUSB0'      # Linux
# ZEBRA_PRINTER_NAME = 'ZDesigner GK420t'  # Nombre específico en Windows

# Ir directamente a Google sin página intermedia
SOCIALACCOUNT_LOGIN_ON_GET = True

# Auto-login después de autenticación exitosa (opcional)
SOCIALACCOUNT_AUTO_SIGNUP = True

# No mostrar formulario de confirmación en login social
SOCIALACCOUNT_EMAIL_AUTHENTICATION_AUTO_CONNECT = True

# Configuración del provider Google para login directo
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        },
        'OAUTH_PKCE_ENABLED': True,
        'FETCH_USERINFO': True,
        # Configuración para login directo
        'VERIFIED_EMAIL': True,
        'VERSION': 'v2',
    }
}