"""
Django settings for VENDO project.
Sistema de Ventas con Integración SRI y Esquemas PostgreSQL

Generated by 'django-admin startproject' using Django 5.2.3.
Modificado para proyecto VENDO con esquemas PostgreSQL.
"""

from pathlib import Path
from decouple import config

print("=== INICIO CARGA SETTINGS ===")

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# ==========================================
# SECURITY SETTINGS
# ==========================================

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='django-insecure-w*wu%x8l%boibg+%#p(v*yi3vu#qe(5y4&*)(@)34p!2eq%+-1')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)

ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='localhost,127.0.0.1').split(',')

print(f"DEBUG: {DEBUG}")

# ==========================================
# APPLICATION DEFINITION
# ==========================================

DJANGO_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
]

THIRD_PARTY_APPS = [
    'rest_framework',
    'corsheaders',
    'django_filters',
]

LOCAL_APPS = [
    'apps.core',
    'apps.users',
    'apps.pos',
    'apps.inventory',
    'apps.invoicing',
    'apps.purchases',
    'apps.accounting',
    'apps.quotations',
    'apps.reports',
    'apps.settings',
]

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS

print(f"INSTALLED_APPS inicial: {len(INSTALLED_APPS)} apps")

# ==========================================
# MIDDLEWARE CONFIGURATION
# ==========================================

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.locale.LocaleMiddleware',
]

ROOT_URLCONF = 'config.urls'

# ==========================================
# TEMPLATES CONFIGURATION
# ==========================================

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.i18n',
                'django.template.context_processors.media',
                'django.template.context_processors.static',
                'django.template.context_processors.tz',
                # Agregar context processors personalizados aquí cuando los crees
                # 'apps.core.context_processors.company_context',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'

print("=== ANTES DE DATABASES ===")

# ==========================================
# DATABASE CONFIGURATION WITH SCHEMAS
# ==========================================

# Database configuration - PostgreSQL con esquemas
try:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': config('DB_NAME'),
            'USER': config('DB_USER'),
            'PASSWORD': config('DB_PASSWORD'),
            'HOST': config('DB_HOST'),
            'PORT': config('DB_PORT'),
            'OPTIONS': {
                'options': '-c search_path=vendo_core,public'
            },
        },
    }
    print(f"✅ DATABASES configurado exitosamente: {list(DATABASES.keys())}")
except Exception as e:
    print(f"❌ Error configurando DATABASES: {e}")
    import traceback
    traceback.print_exc()

# COMENTAMOS TEMPORALMENTE EL ROUTER
# Database Router for Schema Management
# DATABASE_ROUTERS = ['config.db_router.SchemaRouter']

# Database Schema Mapping - CONFIGURACIÓN DE ESQUEMAS
DATABASE_APPS_MAPPING = {
    # Apps core (usuarios, empresa, configuración base)
    'core': 'vendo_core',
    'users': 'vendo_core',
    'settings': 'vendo_core',
    
    # Apps de negocio (cada una en su esquema)
    'pos': 'vendo_pos',
    'inventory': 'vendo_inventory',
    'invoicing': 'vendo_invoicing',
    'purchases': 'vendo_purchases',
    'accounting': 'vendo_accounting',
    'quotations': 'vendo_quotations',
    'reports': 'vendo_reports',
    
    # Apps built-in de Django (esquema público)
    'admin': 'public',
    'auth': 'public',
    'contenttypes': 'public',
    'sessions': 'public',
    'messages': 'public',
    'staticfiles': 'public',
}

print("=== DESPUÉS DE DATABASES ===")

# ==========================================
# PASSWORD VALIDATION
# ==========================================

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 8,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Custom User Model (cuando lo crees)
# AUTH_USER_MODEL = 'users.User'

# ==========================================
# INTERNATIONALIZATION
# ==========================================

LANGUAGE_CODE = 'es'
TIME_ZONE = 'America/Guayaquil'
USE_I18N = True
USE_TZ = True

LANGUAGES = [
    ('es', 'Español'),
    ('en', 'English'),
]

LOCALE_PATHS = [
    BASE_DIR / 'locale',
]

# ==========================================
# STATIC FILES
# ==========================================

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

# ==========================================
# MEDIA FILES
# ==========================================

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# ==========================================
# DEFAULT AUTO FIELD
# ==========================================

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ==========================================
# REST FRAMEWORK CONFIGURATION
# ==========================================

print("=== ANTES DE REST FRAMEWORK ===")

try:
    REST_FRAMEWORK = {
        'DEFAULT_AUTHENTICATION_CLASSES': [
            'rest_framework.authentication.SessionAuthentication',
            'rest_framework.authentication.TokenAuthentication',
        ],
        'DEFAULT_PERMISSION_CLASSES': [
            'rest_framework.permissions.IsAuthenticated',
        ],
        'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
        'PAGE_SIZE': 25,
        'DEFAULT_FILTER_BACKENDS': [
            'django_filters.rest_framework.DjangoFilterBackend',
            'rest_framework.filters.SearchFilter',
            'rest_framework.filters.OrderingFilter',
        ],
    }
    print("✅ REST_FRAMEWORK configurado")
except Exception as e:
    print(f"❌ Error en REST_FRAMEWORK: {e}")

# ==========================================
# CORS CONFIGURATION
# ==========================================

CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://localhost:8000",
    "http://127.0.0.1:8000",
]

CORS_ALLOW_CREDENTIALS = True

# ==========================================
# REDIS CONFIGURATION
# ==========================================

REDIS_URL = config('REDIS_URL', default='redis://localhost:6379/0')

# ==========================================
# CELERY CONFIGURATION
# ==========================================

CELERY_BROKER_URL = REDIS_URL
CELERY_RESULT_BACKEND = REDIS_URL
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE

# ==========================================
# CACHE CONFIGURATION
# ==========================================

print("=== ANTES DE CACHE ===")

try:
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.redis.RedisCache',
            'LOCATION': REDIS_URL,
            'KEY_PREFIX': 'vendo',
            'TIMEOUT': 300,
        }
    }
    print("✅ CACHES configurado")
except Exception as e:
    print(f"❌ Error en CACHES: {e}")

# ==========================================
# SESSION CONFIGURATION
# ==========================================

SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_CACHE_ALIAS = 'default'
SESSION_COOKIE_AGE = 86400  # 24 hours

# ==========================================
# EMAIL CONFIGURATION
# ==========================================

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = config('EMAIL_HOST', default='smtp.gmail.com')
EMAIL_PORT = config('EMAIL_PORT', default=587, cast=int)
EMAIL_USE_TLS = config('EMAIL_USE_TLS', default=True, cast=bool)
EMAIL_HOST_USER = config('EMAIL_HOST_USER', default='')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD', default='')
DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL', default='noreply@vendo.com')

# ==========================================
# SRI API CONFIGURATION
# ==========================================

SRI_API_CONFIG = {
    'BASE_URL': config('SRI_API_BASE_URL', default='https://api.abitmedia.cloud/facturasoft/v1'),
    'TOKEN': config('SRI_API_TOKEN', default=''),
    'ENVIRONMENT': config('SRI_ENVIRONMENT', default='test'),
    'TIMEOUT': 30,
    'MAX_RETRIES': 3,
    'ENDPOINTS': {
        'INVOICES': '/invoices',
        'CREDIT_NOTES': '/credit-notes',
        'DEBIT_NOTES': '/debit-notes',
        'WAYBILLS': '/waybills',
        'RETENTIONS': '/retentions',
        'PURCHASE_SETTLEMENTS': '/purchase-settlements',
        'DOWNLOAD_PDF': '/electronic-vouchers/download-ride',
        'DOWNLOAD_XML': '/electronic-vouchers/download-xml',
    }
}

# ==========================================
# COMPANY CONFIGURATION
# ==========================================

COMPANY_CONFIG = {
    'NAME': config('COMPANY_NAME', default='Mi Empresa'),
    'RUC': config('COMPANY_RUC', default='1234567890001'),
    'ADDRESS': config('COMPANY_ADDRESS', default=''),
    'PHONE': config('COMPANY_PHONE', default=''),
    'EMAIL': config('COMPANY_EMAIL', default=''),
    'LOGO': 'img/logo.png',
    'CURRENCY': 'USD',
    'DECIMAL_PLACES': 2,
}

# ==========================================
# TAX CONFIGURATION FOR ECUADOR
# ==========================================

TAX_CONFIG = {
    'IVA_RATE': 0.12,  # 12%
    'IVA_CODE': '2',   # Código SRI para IVA
    'ICE_RATES': {
        'ALCOHOL': 0.40,
        'TOBACCO': 0.30,
        'FUEL': 0.15,
    },
    'RETENTION_RATES': {
        'RENT_IR': 0.08,      # Impuesto a la Renta - Arrendamientos
        'SERVICES_IR': 0.02,   # Impuesto a la Renta - Servicios
        'GOODS_IR': 0.01,      # Impuesto a la Renta - Bienes
        'IVA_30': 0.30,        # Retención IVA 30%
        'IVA_70': 0.70,        # Retención IVA 70%
        'IVA_100': 1.00,       # Retención IVA 100%
    },
}

# ==========================================
# FILE UPLOAD SETTINGS
# ==========================================

FILE_UPLOAD_MAX_MEMORY_SIZE = config('MAX_UPLOAD_SIZE', default=5242880, cast=int)  # 5MB
DATA_UPLOAD_MAX_MEMORY_SIZE = FILE_UPLOAD_MAX_MEMORY_SIZE
DATA_UPLOAD_MAX_NUMBER_FIELDS = 1000

# ==========================================
# CUSTOM SETTINGS FOR VENDO
# ==========================================

VENDO_CONFIG = {
    'MAX_INVOICE_ITEMS': 100,
    'MAX_PRODUCT_IMAGES': 5,
    'BACKUP_RETENTION_DAYS': 30,
    'SESSION_TIMEOUT_MINUTES': 60,
    'MAX_FAILED_LOGIN_ATTEMPTS': 5,
    'PASSWORD_RESET_TIMEOUT_DAYS': 1,
    'INVOICE_NUMBER_PREFIX': 'FACT-',
    'CREDIT_NOTE_PREFIX': 'NC-',
    'DEBIT_NOTE_PREFIX': 'ND-',
    'WAYBILL_PREFIX': 'GR-',
    'QUOTATION_PREFIX': 'COT-',
    'RECEIPT_PREFIX': 'REC-',
    'LOW_STOCK_THRESHOLD': 10,
    'PAGINATION_SIZE': 25,
    'MAX_SEARCH_RESULTS': 100,
}

print("=== ANTES DE LOGGING ===")

# ==========================================
# LOGGING CONFIGURATION
# ==========================================

try:
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'verbose': {
                'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
                'style': '{',
            },
            'simple': {
                'format': '{levelname} {message}',
                'style': '{',
            },
        },
        'handlers': {
            'file': {
                'level': 'INFO',
                'class': 'logging.handlers.RotatingFileHandler',
                'filename': BASE_DIR / 'logs' / 'vendo.log',
                'maxBytes': 1024 * 1024 * 10,  # 10 MB
                'backupCount': 5,
                'formatter': 'verbose',
            },
            'console': {
                'level': 'DEBUG',
                'class': 'logging.StreamHandler',
                'formatter': 'simple',
            },
            'sri_file': {
                'level': 'INFO',
                'class': 'logging.handlers.RotatingFileHandler',
                'filename': BASE_DIR / 'logs' / 'sri_api.log',
                'maxBytes': 1024 * 1024 * 5,  # 5 MB
                'backupCount': 3,
                'formatter': 'verbose',
            },
        },
        'loggers': {
            'django': {
                'handlers': ['file', 'console'],
                'level': 'INFO',
                'propagate': True,
            },
            'vendo': {
                'handlers': ['file', 'console'],
                'level': 'DEBUG',
                'propagate': True,
            },
            'sri_api': {
                'handlers': ['sri_file', 'console'],
                'level': 'INFO',
                'propagate': False,
            },
        },
    }
    print("✅ LOGGING configurado")
except Exception as e:
    print(f"❌ Error en LOGGING: {e}")

print("=== ANTES DE MESSAGE_TAGS ===")

# ==========================================
# MESSAGE TAGS FOR BOOTSTRAP
# ==========================================

try:
    from django.contrib.messages import constants as messages
    MESSAGE_TAGS = {
        messages.DEBUG: 'debug',
        messages.INFO: 'info',
        messages.SUCCESS: 'success',
        messages.WARNING: 'warning',
        messages.ERROR: 'danger',
    }
    print("✅ MESSAGE_TAGS configurado")
except Exception as e:
    print(f"❌ Error en MESSAGE_TAGS: {e}")

print("=== ANTES DE DEVELOPMENT SETTINGS ===")

# ==========================================
# DEVELOPMENT SETTINGS
# ==========================================

try:
    if DEBUG:
        print("Aplicando configuraciones de desarrollo...")
        # Add development apps
        INSTALLED_APPS += [
            'django_extensions',
            'debug_toolbar',
        ]
        
        # Add debug toolbar middleware
        MIDDLEWARE += [
            'debug_toolbar.middleware.DebugToolbarMiddleware',
        ]
        
        # Internal IPs for debug toolbar
        INTERNAL_IPS = [
            '127.0.0.1',
            'localhost',
        ]
        
        # Development email backend
        EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
        
        print(f"✅ Configuración de desarrollo aplicada. INSTALLED_APPS: {len(INSTALLED_APPS)} apps")
except Exception as e:
    print(f"❌ Error en DEVELOPMENT SETTINGS: {e}")
    import traceback
    traceback.print_exc()

print("=== ANTES DE SECURITY SETTINGS ===")

# ==========================================
# SECURITY SETTINGS FOR PRODUCTION
# ==========================================

try:
    if not DEBUG:
        SECURE_BROWSER_XSS_FILTER = True
        SECURE_CONTENT_TYPE_NOSNIFF = True
        SECURE_HSTS_INCLUDE_SUBDOMAINS = True
        SECURE_HSTS_SECONDS = 31536000
        SECURE_SSL_REDIRECT = config('SECURE_SSL_REDIRECT', default=True, cast=bool)
        SESSION_COOKIE_SECURE = config('SESSION_COOKIE_SECURE', default=True, cast=bool)
        CSRF_COOKIE_SECURE = config('CSRF_COOKIE_SECURE', default=True, cast=bool)
        print("✅ Configuraciones de seguridad aplicadas")
except Exception as e:
    print(f"❌ Error en SECURITY SETTINGS: {e}")

print("=== FIN SETTINGS ===")
print(f"DATABASES final: {list(DATABASES.keys()) if 'DATABASES' in globals() else 'NO DEFINIDO'}")
