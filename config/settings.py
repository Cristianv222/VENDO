"""
Django settings for VENDO project.
Sistema de Ventas con Integración SRI y Esquemas PostgreSQL

Generated by 'django-admin startproject' using Django 5.2.3.
Modificado para proyecto VENDO con esquemas PostgreSQL por módulo.
VERSIÓN CORREGIDA - Compatible con Python 3.13
"""

from pathlib import Path
from decouple import config
import os

print("=== INICIO CARGA SETTINGS VENDO ===")

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# ==========================================
# SECURITY SETTINGS
# ==========================================

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='django-insecure-w*wu%x8l%boibg+%#p(v*yi3vu#qe(5y4&*)(@)34p!2eq%+-1')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)

ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='localhost,127.0.0.1,0.0.0.0').split(',')

print(f"DEBUG: {DEBUG}")
print(f"ALLOWED_HOSTS: {ALLOWED_HOSTS}")

# ==========================================
# APPLICATION DEFINITION
# ==========================================

# Django core apps
DJANGO_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    'django.contrib.sites',
]

# Third party apps
THIRD_PARTY_APPS = [
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',
    'django_filters',
    'crispy_forms',
    'crispy_bootstrap5',
]

# Local VENDO apps - organizadas por prioridad
LOCAL_APPS = [
    # Core system (base, usuarios, configuraciones)
    'apps.core',
    'apps.users',
    'apps.settings',
    
    # Business modules (módulos de negocio)
    'apps.pos',
    'apps.inventory',
    'apps.invoicing',
    'apps.purchases',
    'apps.accounting',
    'apps.quotations',
    'apps.reports',
]

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS

print(f"INSTALLED_APPS cargadas: {len(INSTALLED_APPS)} apps")

# ==========================================
# MIDDLEWARE CONFIGURATION
# ==========================================

MIDDLEWARE = [
    # Security middleware (siempre primero)
    'django.middleware.security.SecurityMiddleware',
    
    # CORS middleware (temprano para APIs)
    'corsheaders.middleware.CorsMiddleware',
    
    # Session middleware
    'django.contrib.sessions.middleware.SessionMiddleware',
    
    # Localization
    'django.middleware.locale.LocaleMiddleware',
    
    # Common middleware
    'django.middleware.common.CommonMiddleware',
    
    # CSRF protection
    'django.middleware.csrf.CsrfViewMiddleware',
    
    # Authentication
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    
    # VENDO Custom Middlewares (orden importante)
    'apps.core.middleware.CompanyMiddleware',       # Gestión de empresa
    'apps.core.middleware.AuditMiddleware',         # Auditoría automática
    'apps.core.middleware.SecurityMiddleware',      # Seguridad adicional
    'apps.core.middleware.PerformanceMiddleware',   # Monitoreo rendimiento
    
    # Messages framework
    'django.contrib.messages.middleware.MessageMiddleware',
    
    # Clickjacking protection
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

# Sites framework
SITE_ID = 1

# ==========================================
# TEMPLATES CONFIGURATION
# ==========================================

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / 'templates',
            BASE_DIR / 'apps' / 'core' / 'templates',
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                # Django built-in context processors
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.i18n',
                'django.template.context_processors.media',
                'django.template.context_processors.static',
                'django.template.context_processors.tz',
                
                # VENDO custom context processors
                'apps.core.context_processors.company_context',
                'apps.core.context_processors.branch_context',
                'apps.core.context_processors.user_context',
                'apps.core.context_processors.system_context',
                'apps.core.context_processors.navigation_context',
                'apps.core.context_processors.menu_context',
                'apps.core.context_processors.notifications_context',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'

print("=== CONFIGURANDO DATABASES ===")

# ==========================================
# DATABASE CONFIGURATION WITH SCHEMAS
# ==========================================

try:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': config('DB_NAME'),
            'USER': config('DB_USER'),
            'PASSWORD': config('DB_PASSWORD'),
            'HOST': config('DB_HOST'),
            'PORT': config('DB_PORT'),
            'OPTIONS': {
                'options': '-c search_path=vendo_core,public',
            },
            'CONN_MAX_AGE': 60,  # Reutilizar conexiones por 60 segundos
            'CONN_HEALTH_CHECKS': True,  # Verificar salud de conexiones
        },
    }
    print(f"✅ DATABASES configurado exitosamente")
except Exception as e:
    print(f"❌ Error configurando DATABASES: {e}")
    import traceback
    traceback.print_exc()

# Database Router for Schema Management (ACTIVADO)
DATABASE_ROUTERS = ['config.db_router.SchemaRouter']

# Database Schema Mapping - Esquemas por módulo
DATABASE_APPS_MAPPING = {
    # Apps core (usuarios, empresa, configuración base)
    'core': 'vendo_core',
    'users': 'vendo_core',
    'settings': 'vendo_core',
    
    # Apps de negocio (cada una en su esquema)
    'pos': 'vendo_pos',
    'inventory': 'vendo_inventory',
    'invoicing': 'vendo_invoicing',
    'purchases': 'vendo_purchases',
    'accounting': 'vendo_accounting',
    'quotations': 'vendo_quotations',
    'reports': 'vendo_reports',
    
    # Apps built-in de Django (esquema público)
    'admin': 'public',
    'auth': 'public',
    'contenttypes': 'public',
    'sessions': 'public',
    'messages': 'public',
    'staticfiles': 'public',
    'sites': 'public',
    
    # Third party apps (esquema público)
    'rest_framework': 'public',
    'authtoken': 'public',
    'corsheaders': 'public',
    'django_filters': 'public',
}

print("=== DATABASES Y ROUTER CONFIGURADOS ===")

# ==========================================
# USER MODEL CONFIGURATION
# ==========================================

# Custom User Model (descomenta cuando esté listo)
# AUTH_USER_MODEL = 'users.User'

# ==========================================
# PASSWORD VALIDATION
# ==========================================

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 8,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# ==========================================
# INTERNATIONALIZATION
# ==========================================

LANGUAGE_CODE = 'es-ec'
TIME_ZONE = 'America/Guayaquil'
USE_I18N = True
USE_TZ = True

LANGUAGES = [
    ('es', 'Español'),
    ('en', 'English'),
]

LOCALE_PATHS = [
    BASE_DIR / 'locale',
]

# ==========================================
# STATIC FILES CONFIGURATION
# ==========================================

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

STATICFILES_DIRS = [
    BASE_DIR / 'static',
    BASE_DIR / 'apps' / 'core' / 'static',
]

STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
]

# ==========================================
# MEDIA FILES CONFIGURATION
# ==========================================

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Media subdirectories
MEDIA_DIRS = {
    'LOGOS': 'logos',
    'CERTIFICATES': 'certificates',
    'PRODUCTS': 'products',
    'INVOICES': 'invoices',
    'DOCUMENTS': 'documents',
    'REPORTS': 'reports',
    'BACKUPS': 'backups',
    'AVATARS': 'avatars',
}

# ==========================================
# DEFAULT AUTO FIELD
# ==========================================

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ==========================================
# REST FRAMEWORK CONFIGURATION
# ==========================================

print("=== CONFIGURANDO REST FRAMEWORK ===")

try:
    REST_FRAMEWORK = {
        'DEFAULT_AUTHENTICATION_CLASSES': [
            'rest_framework.authentication.SessionAuthentication',
            'rest_framework.authentication.TokenAuthentication',
        ],
        'DEFAULT_PERMISSION_CLASSES': [
            'apps.core.permissions.IsAuthenticatedAndActive',
            'apps.core.permissions.HasCompanyAccess',
        ],
        'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
        'PAGE_SIZE': 25,
        'DEFAULT_FILTER_BACKENDS': [
            'django_filters.rest_framework.DjangoFilterBackend',
            'rest_framework.filters.SearchFilter',
            'rest_framework.filters.OrderingFilter',
        ],
        'DEFAULT_RENDERER_CLASSES': [
            'rest_framework.renderers.JSONRenderer',
            'rest_framework.renderers.BrowsableAPIRenderer',
        ],
        'DEFAULT_PARSER_CLASSES': [
            'rest_framework.parsers.JSONParser',
            'rest_framework.parsers.FormParser',
            'rest_framework.parsers.MultiPartParser',
        ],
        'EXCEPTION_HANDLER': 'apps.core.exceptions.custom_exception_handler',
        'DATETIME_FORMAT': '%d/%m/%Y %H:%M:%S',
        'DATE_FORMAT': '%d/%m/%Y',
    }
    print("✅ REST_FRAMEWORK configurado")
except Exception as e:
    print(f"❌ Error en REST_FRAMEWORK: {e}")

# ==========================================
# CORS CONFIGURATION
# ==========================================

CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",    # React dev server
    "http://127.0.0.1:3000",
    "http://localhost:8080",    # Vue dev server
    "http://127.0.0.1:8080",
    "http://localhost:8000",    # Django dev server
    "http://127.0.0.1:8000",
]

CORS_ALLOW_CREDENTIALS = True

CORS_ALLOWED_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'x-company-id',
    'x-branch-id',
]

# ==========================================
# CACHE CONFIGURATION
# ==========================================

REDIS_URL = config('REDIS_URL', default='redis://localhost:6379/0')

print("=== CONFIGURANDO CACHE ===")

try:
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.redis.RedisCache',
            'LOCATION': REDIS_URL,
            'KEY_PREFIX': 'vendo',
            'TIMEOUT': 300,  # 5 minutos por defecto
            'OPTIONS': {
                'CLIENT_CLASS': 'django_redis.client.DefaultClient',
                'IGNORE_EXCEPTIONS': True,  # No romper si Redis no está disponible
            }
        },
        'sessions': {
            'BACKEND': 'django.core.cache.backends.redis.RedisCache',
            'LOCATION': REDIS_URL,
            'KEY_PREFIX': 'vendo_session',
            'TIMEOUT': 86400,  # 24 horas
        },
        'local_memory': {
            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
            'LOCATION': 'vendo-locmem',
            'TIMEOUT': 60,
        }
    }
    print("✅ CACHES configurado")
except Exception as e:
    print(f"❌ Error en CACHES: {e}")
    # Fallback a memoria local si Redis no está disponible
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
            'LOCATION': 'vendo-default',
        }
    }

# ==========================================
# SESSION CONFIGURATION
# ==========================================

SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_CACHE_ALIAS = 'sessions'
SESSION_COOKIE_AGE = 86400  # 24 horas
SESSION_COOKIE_NAME = 'vendo_sessionid'
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_SAVE_EVERY_REQUEST = True
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SECURE = not DEBUG  # Solo HTTPS en producción

# ==========================================
# CELERY CONFIGURATION
# ==========================================

CELERY_BROKER_URL = REDIS_URL
CELERY_RESULT_BACKEND = REDIS_URL
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE
CELERY_ENABLE_UTC = True
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 30 * 60  # 30 minutos
CELERY_TASK_SOFT_TIME_LIMIT = 25 * 60  # 25 minutos
CELERY_WORKER_PREFETCH_MULTIPLIER = 1
CELERY_WORKER_MAX_TASKS_PER_CHILD = 1000

# ==========================================
# EMAIL CONFIGURATION
# ==========================================

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = config('EMAIL_HOST', default='smtp.gmail.com')
EMAIL_PORT = config('EMAIL_PORT', default=587, cast=int)
EMAIL_USE_TLS = config('EMAIL_USE_TLS', default=True, cast=bool)
EMAIL_HOST_USER = config('EMAIL_HOST_USER', default='')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD', default='')
DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL', default='noreply@vendo.com')
SERVER_EMAIL = DEFAULT_FROM_EMAIL

# ==========================================
# CRISPY FORMS CONFIGURATION
# ==========================================

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

# ==========================================
# SRI API CONFIGURATION
# ==========================================

SRI_API_CONFIG = {
    'BASE_URL': config('SRI_API_BASE_URL', default='https://api.abitmedia.cloud/facturasoft/v1'),
    'TOKEN': config('SRI_API_TOKEN', default=''),
    'ENVIRONMENT': config('SRI_ENVIRONMENT', default='test'),
    'TIMEOUT': 30,
    'MAX_RETRIES': 3,
    'ENDPOINTS': {
        'INVOICES': '/invoices',
        'CREDIT_NOTES': '/credit-notes',
        'DEBIT_NOTES': '/debit-notes',
        'WAYBILLS': '/waybills',
        'RETENTIONS': '/retentions',
        'PURCHASE_SETTLEMENTS': '/purchase-settlements',
        'DOWNLOAD_PDF': '/electronic-vouchers/download-ride',
        'DOWNLOAD_XML': '/electronic-vouchers/download-xml',
    }
}

# ==========================================
# COMPANY DEFAULT CONFIGURATION
# ==========================================

COMPANY_CONFIG = {
    'NAME': config('COMPANY_NAME', default='Mi Empresa'),
    'RUC': config('COMPANY_RUC', default='1234567890001'),
    'ADDRESS': config('COMPANY_ADDRESS', default=''),
    'PHONE': config('COMPANY_PHONE', default=''),
    'EMAIL': config('COMPANY_EMAIL', default=''),
    'LOGO': 'img/logo.png',
    'CURRENCY': 'USD',
    'DECIMAL_PLACES': 2,
    'MAX_BRANCHES_PER_COMPANY': 10,
    'DEFAULT_COUNTRY': 'EC',
    'DEFAULT_TIMEZONE': TIME_ZONE,
}

# ==========================================
# TAX CONFIGURATION FOR ECUADOR
# ==========================================

TAX_CONFIG = {
    'IVA_RATE': 0.12,  # 12%
    'IVA_CODE': '2',   # Código SRI para IVA
    'ICE_RATES': {
        'ALCOHOL': 0.40,
        'TOBACCO': 0.30,
        'FUEL': 0.15,
    },
    'RETENTION_RATES': {
        'RENT_IR': 0.08,      # Impuesto a la Renta - Arrendamientos
        'SERVICES_IR': 0.02,   # Impuesto a la Renta - Servicios
        'GOODS_IR': 0.01,      # Impuesto a la Renta - Bienes
        'IVA_30': 0.30,        # Retención IVA 30%
        'IVA_70': 0.70,        # Retención IVA 70%
        'IVA_100': 1.00,       # Retención IVA 100%
    },
}

# ==========================================
# FILE UPLOAD SETTINGS
# ==========================================

FILE_UPLOAD_MAX_MEMORY_SIZE = config('MAX_UPLOAD_SIZE', default=5242880, cast=int)  # 5MB
DATA_UPLOAD_MAX_MEMORY_SIZE = FILE_UPLOAD_MAX_MEMORY_SIZE
DATA_UPLOAD_MAX_NUMBER_FIELDS = 1000

FILE_UPLOAD_SETTINGS = {
    'MAX_IMAGE_SIZE': 5 * 1024 * 1024,      # 5 MB
    'MAX_DOCUMENT_SIZE': 10 * 1024 * 1024,  # 10 MB
    'MAX_CERTIFICATE_SIZE': 1 * 1024 * 1024, # 1 MB
    'ALLOWED_IMAGE_TYPES': ['jpg', 'jpeg', 'png', 'gif', 'webp'],
    'ALLOWED_DOCUMENT_TYPES': ['pdf', 'doc', 'docx', 'txt'],
    'ALLOWED_CERTIFICATE_TYPES': ['p12', 'pfx'],
    'ALLOWED_EXCEL_TYPES': ['xls', 'xlsx', 'csv'],
}

# ==========================================
# CUSTOM SETTINGS FOR VENDO MODULES
# ==========================================

VENDO_CONFIG = {
    # General
    'VERSION': '1.0.0',
    'SYSTEM_NAME': 'VENDO',
    
    # Business rules
    'MAX_INVOICE_ITEMS': 100,
    'MAX_PRODUCT_IMAGES': 5,
    'BACKUP_RETENTION_DAYS': 30,
    'SESSION_TIMEOUT_MINUTES': 60,
    'MAX_FAILED_LOGIN_ATTEMPTS': 5,
    'PASSWORD_RESET_TIMEOUT_DAYS': 1,
    
    # Document prefixes
    'INVOICE_NUMBER_PREFIX': 'FACT-',
    'CREDIT_NOTE_PREFIX': 'NC-',
    'DEBIT_NOTE_PREFIX': 'ND-',
    'WAYBILL_PREFIX': 'GR-',
    'QUOTATION_PREFIX': 'COT-',
    'RECEIPT_PREFIX': 'REC-',
    
    # Inventory
    'LOW_STOCK_THRESHOLD': 10,
    'CRITICAL_STOCK_THRESHOLD': 5,
    
    # UI/UX
    'PAGINATION_SIZE': 25,
    'MAX_SEARCH_RESULTS': 100,
    'ITEMS_PER_PAGE_OPTIONS': [10, 25, 50, 100],
    
    # Reporting
    'DEFAULT_REPORT_FORMAT': 'PDF',
    'MAX_REPORT_RECORDS': 10000,
    
    # Performance
    'QUERY_TIMEOUT_SECONDS': 30,
    'MAX_CONCURRENT_USERS': 100,
}

# ==========================================
# AUDIT SETTINGS
# ==========================================

AUDIT_SETTINGS = {
    'ENABLED': True,
    'LOG_VIEWS': True,
    'LOG_API_CALLS': True,
    'LOG_ADMIN_ACTIONS': True,
    'RETENTION_DAYS': 365,  # Mantener logs por 1 año
    'EXCLUDED_PATHS': ['/health-check/', '/static/', '/media/'],
    'EXCLUDED_USERS': [],  # Usuarios excluidos de auditoría
    'SENSITIVE_FIELDS': ['password', 'token', 'secret', 'key'],
}

# ==========================================
# LOGGING CONFIGURATION (CORREGIDO)
# ==========================================

print("=== CONFIGURANDO LOGGING ===")

# Crear directorio de logs si no existe
os.makedirs(BASE_DIR / 'logs', exist_ok=True)

try:
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'verbose': {
                'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
                'style': '{',
            },
            'simple': {
                'format': '{levelname} {asctime} {message}',
                'style': '{',
            },
            'structured': {
                'format': 'LEVEL={levelname} TIME={asctime} MODULE={module} MESSAGE={message}',
                'style': '{',
            },
        },
        'filters': {
            'require_debug_false': {
                '()': 'django.utils.log.RequireDebugFalse',
            },
            'require_debug_true': {
                '()': 'django.utils.log.RequireDebugTrue',
            },
        },
        'handlers': {
            'console': {
                'level': 'DEBUG',
                'filters': ['require_debug_true'],
                'class': 'logging.StreamHandler',
                'formatter': 'simple',
            },
            'file_info': {
                'level': 'INFO',
                'class': 'logging.handlers.RotatingFileHandler',
                'filename': BASE_DIR / 'logs' / 'vendo.log',
                'maxBytes': 1024 * 1024 * 10,  # 10 MB
                'backupCount': 5,
                'formatter': 'verbose',
            },
            'file_error': {
                'level': 'ERROR',
                'class': 'logging.handlers.RotatingFileHandler',
                'filename': BASE_DIR / 'logs' / 'error.log',
                'maxBytes': 1024 * 1024 * 5,  # 5 MB
                'backupCount': 3,
                'formatter': 'verbose',
            },
            'sri_file': {
                'level': 'INFO',
                'class': 'logging.handlers.RotatingFileHandler',
                'filename': BASE_DIR / 'logs' / 'sri_api.log',
                'maxBytes': 1024 * 1024 * 5,  # 5 MB
                'backupCount': 3,
                'formatter': 'structured',
            },
            'audit_file': {
                'level': 'INFO',
                'class': 'logging.handlers.RotatingFileHandler',
                'filename': BASE_DIR / 'logs' / 'audit.log',
                'maxBytes': 1024 * 1024 * 10,  # 10 MB
                'backupCount': 10,
                'formatter': 'structured',
            },
            'celery_file': {
                'level': 'INFO',
                'class': 'logging.handlers.RotatingFileHandler',
                'filename': BASE_DIR / 'logs' / 'celery.log',
                'maxBytes': 1024 * 1024 * 5,  # 5 MB
                'backupCount': 3,
                'formatter': 'verbose',
            },
            'mail_admins': {
                'level': 'ERROR',
                'filters': ['require_debug_false'],
                'class': 'django.utils.log.AdminEmailHandler',
                'formatter': 'verbose',
            },
        },
        'root': {
            'level': 'INFO',
            'handlers': ['console', 'file_info'],
        },
        'loggers': {
            'django': {
                'handlers': ['console', 'file_info', 'file_error'],
                'level': 'INFO',
                'propagate': False,
            },
            'django.request': {
                'handlers': ['file_error', 'mail_admins'],
                'level': 'ERROR',
                'propagate': False,
            },
            'django.security': {
                'handlers': ['file_error', 'mail_admins'],
                'level': 'ERROR',
                'propagate': False,
            },
            'apps.core': {
                'handlers': ['console', 'file_info'],
                'level': 'DEBUG',
                'propagate': False,
            },
            'apps.users': {
                'handlers': ['console', 'file_info'],
                'level': 'DEBUG',
                'propagate': False,
            },
            'apps.pos': {
                'handlers': ['console', 'file_info'],
                'level': 'DEBUG',
                'propagate': False,
            },
            'apps.inventory': {
                'handlers': ['console', 'file_info'],
                'level': 'DEBUG',
                'propagate': False,
            },
            'apps.invoicing': {
                'handlers': ['console', 'file_info'],
                'level': 'DEBUG',
                'propagate': False,
            },
            'sri_api': {
                'handlers': ['sri_file', 'console'],
                'level': 'INFO',
                'propagate': False,
            },
            'audit': {
                'handlers': ['audit_file'],
                'level': 'INFO',
                'propagate': False,
            },
            'celery': {
                'handlers': ['celery_file', 'console'],
                'level': 'INFO',
                'propagate': False,
            },
            'celery.task': {
                'handlers': ['celery_file'],
                'level': 'INFO',
                'propagate': False,
            },
        },
    }
    print("✅ LOGGING configurado")
except Exception as e:
    print(f"❌ Error en LOGGING: {e}")

# ==========================================
# MESSAGE TAGS FOR BOOTSTRAP
# ==========================================

try:
    from django.contrib.messages import constants as messages
    MESSAGE_TAGS = {
        messages.DEBUG: 'debug',
        messages.INFO: 'info',
        messages.SUCCESS: 'success',
        messages.WARNING: 'warning',
        messages.ERROR: 'danger',
    }
    print("✅ MESSAGE_TAGS configurado")
except Exception as e:
    print(f"❌ Error en MESSAGE_TAGS: {e}")

print("=== CONFIGURACIONES DE DESARROLLO/PRODUCCIÓN ===")

# ==========================================
# DEVELOPMENT SETTINGS
# ==========================================

if DEBUG:
    print("Aplicando configuraciones de desarrollo...")
    try:
        # Add development apps
        INSTALLED_APPS += [
            'django_extensions',
            'debug_toolbar',
        ]
        
        # Add debug toolbar middleware
        MIDDLEWARE += [
            'debug_toolbar.middleware.DebugToolbarMiddleware',
        ]
        
        # Internal IPs for debug toolbar
        INTERNAL_IPS = [
            '127.0.0.1',
            'localhost',
            '0.0.0.0',
        ]
        
        # Debug toolbar configuration
        DEBUG_TOOLBAR_CONFIG = {
            'SHOW_TOOLBAR_CALLBACK': lambda request: DEBUG,
            'SHOW_COLLAPSED': True,
            'SHOW_TEMPLATE_CONTEXT': True,
        }
        
        # Development email backend
        EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
        
        # Allow all origins in development
        CORS_ALLOW_ALL_ORIGINS = True
        
        # Disable template caching in development
        for template_engine in TEMPLATES:
            template_engine['OPTIONS']['debug'] = True
        
        print(f"✅ Configuración de desarrollo aplicada. INSTALLED_APPS: {len(INSTALLED_APPS)} apps")
        
    except Exception as e:
        print(f"❌ Error en DEVELOPMENT SETTINGS: {e}")
        import traceback
        traceback.print_exc()

# ==========================================
# PRODUCTION SETTINGS
# ==========================================

else:  # Production settings
    print("Aplicando configuraciones de producción...")
    try:
        # Security settings
        SECURE_BROWSER_XSS_FILTER = True
        SECURE_CONTENT_TYPE_NOSNIFF = True
        SECURE_HSTS_INCLUDE_SUBDOMAINS = True
        SECURE_HSTS_SECONDS = 31536000  # 1 año
        SECURE_HSTS_PRELOAD = True
        SECURE_SSL_REDIRECT = config('SECURE_SSL_REDIRECT', default=True, cast=bool)
        SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
        
        # Cookies security
        SESSION_COOKIE_SECURE = True
        CSRF_COOKIE_SECURE = True
        CSRF_COOKIE_HTTPONLY = True
        
        # Force HTTPS
        USE_TLS = True
        
        # Compression
        MIDDLEWARE.insert(1, 'django.middleware.gzip.GZipMiddleware')
        
        # Static files optimization
        STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.ManifestStaticFilesStorage'
        
        # Admins for error reporting
        ADMINS = [
            ('Admin VENDO', config('ADMIN_EMAIL', default='admin@vendo.com')),
        ]
        MANAGERS = ADMINS
        
        print("✅ Configuraciones de seguridad aplicadas")
        
    except Exception as e:
        print(f"❌ Error en PRODUCTION SETTINGS: {e}")

# ==========================================
# ERROR REPORTING
# ==========================================

# Configuración para Sentry (opcional)
SENTRY_DSN = config('SENTRY_DSN', default='')
if SENTRY_DSN and not DEBUG:
    try:
        import sentry_sdk
        from sentry_sdk.integrations.django import DjangoIntegration
        from sentry_sdk.integrations.celery import CeleryIntegration
        from sentry_sdk.integrations.redis import RedisIntegration
        
        sentry_sdk.init(
            dsn=SENTRY_DSN,
            integrations=[
                DjangoIntegration(auto_enabling=True),
                CeleryIntegration(auto_enabling=True),
                RedisIntegration(),
            ],
            traces_sample_rate=0.1,
            send_default_pii=False,
            environment='production' if not DEBUG else 'development',
        )
        print("✅ Sentry configurado")
    except ImportError:
        print("⚠️ Sentry SDK no instalado")

# ==========================================
# PERFORMANCE MONITORING
# ==========================================

# Configuración para New Relic (opcional)
NEW_RELIC_CONFIG_FILE = config('NEW_RELIC_CONFIG_FILE', default='')
if NEW_RELIC_CONFIG_FILE and not DEBUG:
    try:
        import newrelic.agent
        newrelic.agent.initialize(NEW_RELIC_CONFIG_FILE)
        print("✅ New Relic configurado")
    except ImportError:
        print("⚠️ New Relic agent no instalado")

# ==========================================
# HEALTH CHECK CONFIGURATION
# ==========================================

HEALTH_CHECK = {
    'TIMEOUT': 10,  # segundos
    'CHECKS': [
        'database',
        'cache',
        'celery',
        'redis',
        'disk_space',
    ],
    'DISK_USAGE_MAX': 90,  # % máximo de uso de disco
    'MEMORY_USAGE_MAX': 90,  # % máximo de uso de memoria
}

# ==========================================
# API RATE LIMITING
# ==========================================

REST_FRAMEWORK_RATE_LIMITS = {
    'anon': '100/hour',
    'user': '1000/hour',
    'admin': '5000/hour',
}

# ==========================================
# BACKUP CONFIGURATION
# ==========================================

BACKUP_CONFIG = {
    'ENABLED': config('BACKUP_ENABLED', default=True, cast=bool),
    'STORAGE_PATH': BASE_DIR / 'media' / 'backups',
    'RETENTION_DAYS': 30,
    'SCHEDULE': {
        'DATABASE': '0 2 * * *',  # Diario a las 2 AM
        'MEDIA': '0 3 * * 0',     # Semanal los domingos a las 3 AM
    },
    'COMPRESS': True,
    'ENCRYPT': config('BACKUP_ENCRYPT', default=False, cast=bool),
    'ENCRYPTION_KEY': config('BACKUP_ENCRYPTION_KEY', default=''),
}

print("=== CONFIGURACIONES ADICIONALES COMPLETADAS ===")
print(f"DATABASES final: {list(DATABASES.keys()) if 'DATABASES' in globals() else 'NO DEFINIDO'}")
print(f"APPS TOTALES: {len(INSTALLED_APPS)}")
print(f"MIDDLEWARE STACK: {len(MIDDLEWARE)} middlewares")
print(f"ESQUEMAS CONFIGURADOS: {len(DATABASE_APPS_MAPPING)}")
print("=== FIN SETTINGS VENDO ===")

# ==========================================
# CONFIGURACIÓN FUTURA PARA NUEVOS MÓDULOS
# ==========================================

# Configuración para módulos futuros
FUTURE_MODULES_CONFIG = {
    'ecommerce': {
        'enabled': False,
        'schema': 'vendo_ecommerce',
        'payment_gateways': ['paypal', 'stripe', 'payphone'],
    },
    'crm': {
        'enabled': False,
        'schema': 'vendo_crm',
        'lead_sources': ['web', 'phone', 'email', 'referral'],
    },
    'hr': {
        'enabled': False,
        'schema': 'vendo_hr',
        'modules': ['employees', 'payroll', 'attendance'],
    },
    'warehouse': {
        'enabled': False,
        'schema': 'vendo_warehouse',
        'features': ['locations', 'transfers', 'picking'],
    },
    'analytics': {
        'enabled': False,
        'schema': 'vendo_analytics',
        'engines': ['elasticsearch', 'clickhouse'],
    },
}

# Variables de entorno adicionales para personalización
CUSTOM_BRAND_NAME = config('CUSTOM_BRAND_NAME', default='VENDO')
CUSTOM_THEME_COLOR = config('CUSTOM_THEME_COLOR', default='#007bff')
CUSTOM_LOGO_URL = config('CUSTOM_LOGO_URL', default='')
CUSTOM_FAVICON_URL = config('CUSTOM_FAVICON_URL', default='')

# Feature flags para habilitar/deshabilitar funcionalidades
FEATURE_FLAGS = {
    'MULTI_CURRENCY': config('FEATURE_MULTI_CURRENCY', default=False, cast=bool),
    'ADVANCED_REPORTING': config('FEATURE_ADVANCED_REPORTING', default=True, cast=bool),
    'API_V2': config('FEATURE_API_V2', default=False, cast=bool),
    'MOBILE_APP': config('FEATURE_MOBILE_APP', default=False, cast=bool),
    'INTEGRATIONS': config('FEATURE_INTEGRATIONS', default=True, cast=bool),
    'ADVANCED_PERMISSIONS': config('FEATURE_ADVANCED_PERMISSIONS', default=True, cast=bool),
    'REAL_TIME_SYNC': config('FEATURE_REAL_TIME_SYNC', default=False, cast=bool),
    'OFFLINE_MODE': config('FEATURE_OFFLINE_MODE', default=False, cast=bool),
}

print(f"✅ CONFIGURACIÓN COMPLETA DE VENDO CARGADA EXITOSAMENTE")
print(f"🚀 Sistema: {CUSTOM_BRAND_NAME}")
print(f"🔧 Debug: {DEBUG}")
print(f"📊 Features habilitadas: {sum(1 for v in FEATURE_FLAGS.values() if v)}/{len(FEATURE_FLAGS)}")